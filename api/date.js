// более подробно можно ознакомиться по ссылке 
// https://learn.javascript.ru/datetime

// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

var date = new Date()
// Создает объект Date с текущей датой и временем

new Date(year, month, date, hours, minutes, seconds, ms)
// Дату можно создать, используя компоненты в местной 
// временной зоне. Для этого формата обязательны только 
// первые два аргумента. Отсутствующие параметры, начиная 
// с hours считаются равными нулю, а date – единице.
// year должен быть из 4 цифр.
// Отсчет месяцев month начинается с нуля 0

date.getFullYear()
// Получить год (из 4 цифр)

date.getMonth()
// Получить месяц, от 0 до 11.

date.getDate()
// Получить число месяца, от 1 до 31.

getHours(), getMinutes(), getSeconds(), getMilliseconds()
// Получить соответствующие компоненты в текущей времменой зоне.

date.getDay()
// Получить номер дня в неделе. Неделя в JavaScript начинается 
// с воскресенья, так что результат будет числом от 
// 0(воскресенье) до 6(суббота)

date.getTime()
// Возвращает число миллисекунд, прошедших с 1 января 1970 года 
// GMT+0, то есть того же вида, который используется в конструкторе 
// new Date(milliseconds).

date.getTimezoneOffset()
// Возвращает разницу между местным и UTC-временем, в минутах.

setFullYear(year, month, date)
setMonth(month, date)
setDate(date)
setHours(hour, min, sec, ms)
setMinutes(min, sec, ms)
setSeconds(sec, ms)
setMilliseconds(ms)
setTime(milliseconds)
// устанавливает всю дату по миллисекундам с 01.01.1970 UTC

// Все они, кроме setTime(), обладают также UTC-вариантом, 
// например: setUTCHours()

+date
// преобразование к числе

var ex = performance.now() 
// возвращает количество миллисекунд, прошедшее с начала загрузки 
// страницы. Причём именно с самого начала, до того, как загрузился 
// HTML-файл, если точнее – с момента выгрузки предыдущей страницы 
// из памяти.
// Так что это время включает в себя всё, включая начальное обращение 
// к серверу.
// Его можно посмотреть в любом месте страницы, даже в <head>, чтобы 
// узнать, сколько времени потребовалось браузеру, чтобы до него 
// добраться, включая загрузку HTML.
// Возвращаемое значение измеряется в миллисекундах, но дополнительно 
// имеет точность 3 знака после запятой (до миллионных долей секунды!), 
// поэтому можно использовать его и для более точного бенчмаркинга 
// в том числе

date.toLocaleString(локаль, опции)
// позволяет указать, какие параметры даты нужно вывести, и ряд 
// настроек вывода, после чего интерпретатор сам сформирует строку.
// более подробно 
// https://learn.javascript.ru/datetime#форматирование-и-вывод-дат

toString(), toDateString(), toTimeString() 
// Возвращают стандартное строчное представление, не заданное жёстко 
// в стандарте, а зависящее от браузера. Единственное требование к 
// нему – читаемость человеком. Метод toString возвращает дату целиком, 
// toDateString() и toTimeString() – только дату и время соответственно.

toUTCString() 
// То же самое, что toString(), но дата в зоне UTC

var ex = Date.parse(str) 
// разбирает строку str в таком формате и возвращает соответствующее ей 
// количество миллисекунд. Если это невозможно, Date.parse возвращает NaN

Date.now() 
// возвращает дату сразу в виде миллисекунд. Технически, он аналогичен 
// вызову +new Date(), но в отличие от него не создаёт промежуточный 
// объект даты, а поэтому – во много раз быстрее