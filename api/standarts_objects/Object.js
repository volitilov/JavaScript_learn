Object 
// Конструктор Object создаёт объект-обёртку для переданного 
// значения. Если значением является null или undefined, создаёт 
// и возвращает пустой объект, в противном случае возвращает объект 
// такого типа, который соответствует переданному значению. Если 
// значение уже является объектом, конструктор вернёт это значение.

// При вызове в не-конструкторном контексте, Object ведёт себя 
// идентично коду new Object().

// Инициализатор объекта или литерал
{ [ nameValuePair1[, nameValuePair2[, ...nameValuePairN] ] ] }

// Вызов в качестве конструктора
new Object([value])

// более подробно можно ознакомиться по ссылке 
// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object

// :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

// Свойства конструктора ::::::::::::::::::::::::::::::::

Object.length
// Имеет значение 1.

Object.prototype
// Позволяет добавлять свойства ко всем объектам типа Object.



// Методы конструктора ::::::::::::::::::::::::::::::::::

Object.assign() 
// Создаёт новый объект путём копирования значений всех собственных 
// перечислимых свойств из одного или более исходных объектов в 
// целевой объект.

Object.create()
// Создаёт новый объект с указанными объектом прототипа и свойствами.

Object.defineProperty()
// Добавляет к объекту именованное свойство, описываемое переданным 
// дескриптором.

Object.defineProperties()
// Добавляет к объекту именованные свойства, описываемые переданными 
// дескрипторами.

Object.freeze()
// Замораживает объект: другой код не сможет удалить или изменить 
// никакое свойство.

Object.getOwnPropertyDescriptor()
// Возвращает дескриптор свойства для именованного свойства объекта.

Object.getOwnPropertyNames()
// Возвращает массив, содержащий имена всех переданных объекту 
// собственных перечисляемых и неперечисляемых свойств.

Object.getOwnPropertySymbols() 
// Возвращает массив всех символьных свойств, найденных 
// непосредственно в переданом объекте.

Object.getPrototypeOf()
// Возвращает прототип указанного объекта.

Object.is() 
// Определяет, являются ли два значения различимыми (то есть, 
// одинаковыми)

Object.isExtensible()
// Определяет, разрешено ли расширение объекта.

Object.isFrozen()
// Определяет, был ли объект заморожен.

Object.isSealed()
// Определяет, является ли объект запечатанным (sealed).

Object.keys()
// Возвращает массив, содержащий имена всех собственных 
// перечислимых свойств переданного объекта.

Object.observe() 
// Асинхронно наблюдает за изменениями в объекте.

Object.preventExtensions()
// Предотвращает любое расширение объекта.

Object.seal()
// Предотвращает удаление свойств объекта другим кодом.

Object.setPrototypeOf() 
// Устанавливает прототип (то есть, внутреннее свойство 
// [[Prototype]])



// ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
// Экземпляры и прототип объекта Object :::::::::::::::::::::::::::::

// Все объекты в JavaScript являются потомками Object; все объекты 
// наследуют методы и свойства из прототипа объекта Object.prototype, 
// хотя они и могут быть переопределены. Например, прототипы других 
// конструкторов переопределяют свойство constructor и предоставляют 
// свои собственные методы toString(). Изменения в объекте прототипа 
// Object распространяются на все объекты до тех пор, пока свойства и 
// методы, учитывающие эти изменения, не переопределяются дальше по 
// цепочке прототипов.

// Свойства :::::::::::::::::

Object.prototype.constructor
// Определяет функцию, создающую прототип объекта.

Object.prototype.__proto__ 
// Указывает на объект, который использовался в качестве прототипа при 
// инстанцировании объекта.

Object.prototype.__noSuchMethod__ 
// Позволяет определить функцию, выполняющуюся при вызове в качестве 
// метода не определённого члена объекта.



// Методы :::::::::::::::::::

Object.prototype.hasOwnProperty()
// Возвращает логическое значение, указывающее, содержит ли указанное 
// свойство непосредственно объект, или он унаследовал его по цепочке 
// прототипов.

Object.prototype.isPrototypeOf()
// Возвращает логическое значение, указывающее, состоит ли указанный 
// объект в цепочке прототипов объекта, на котором был вызван данный 
// метод.

Object.prototype.propertyIsEnumerable()
// Возвращает логическое значение, указывающее, установлен ли 
// внутренний атрибут ECMAScript DontEnum.

Object.prototype.toSource() 
// Возвращает строку, содержащую исходный код объекта в литеральной 
// форме, представляющего объект, на котором был вызван данный метод; 
// вы можете использовать это значение для создания нового объекта.

Object.prototype.toLocaleString()
// Вызывает toString().

Object.prototype.toString()
// Возвращает строковое представление объекта.

Object.prototype.unwatch() 
// Удаляет точку наблюдения (watchpoint) со свойства объекта.

Object.prototype.valueOf()
// Возвращает значение примитива указанного объекта.

Object.prototype.watch() 
// Добавляет точку наблюдения (watchpoint) к свойству объекта.